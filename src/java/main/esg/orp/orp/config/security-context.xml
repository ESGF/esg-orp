<?xml version="1.0" encoding="UTF-8"?>

<!-- Top level Spring Security configuration file for Web MVC applications -->

<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:security="http://www.springframework.org/schema/security"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	   					   http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- The "http" namespace element automatically creates the following filters: 
	     HttpSessionContextIntegrationFilter, ExceptionTranslationFilter and FilterSecurityInterceptor,
	     in the proper order. -->
	<security:http>

		<!-- SSL required for all HTTP requests to this application -->
		<security:intercept-url pattern="/**" requires-channel="https" />
		
		<!-- Custom filter to detect "redirect" parameter -->
		<security:custom-filter position="FIRST" ref="preAuthenticationFilter"/>
		
		<!-- Creates an X509PreAuthenticatedProcessingFilter which by default, extracts the principal
		     using the Spring SubjectDnX509PrincipalExtractor with the default matching regular expression "CN=(.?)" -->
		<security:x509 user-service-ref="myUserDetailsService"/>
		
		<!-- The "openid-login" tag creates an OpenID login entry point and an OpenIDAuthenticationProvider, 
		     which requires an implementation of UsersDetailsService defined in the context.
		     Also, it creates an OpenIDAuthenticationFilter that redirects the client to the OpenID
		     Identity Provider before authentication, and process the HTTP redirect from
		     the OpenID Identity Provider after the client has successfully authenticated -->
    	<!-- <security:openid-login login-page="/home.htm" user-service-ref="myUserDetailsService" 
    	                       login-processing-url="/j_spring_openid_security_check.htm"
    	                       default-target-url="/home.htm" authentication-failure-url="/home.htm?failed=true"/>  -->
    	                       
    	<!-- Custom configuration of OpenIDAuthenticationFilter to use white list (in OpenIDConsumer) -->
    	<security:custom-filter position="OPENID_FILTER" ref="myOpenIDAuthenticationFilter" />
    	                       
    	<!-- Custom filter to set authentication cookie. -->
    	<security:custom-filter position="LAST" ref="postAuthenticationFilter"/>
    	
    	<!-- Disable anonymous authentication -->
    	<security:anonymous enabled="false" />
    	
	</security:http>
	
	<!-- Filter that saves the "redirect" parameter -->
	<bean id="preAuthenticationFilter" class="esg.orp.orp.PreAuthenticationFilter" />
	
	<!-- Filter responsible for OpenID authentication. 
		 The OpenIDAuthenticationFilter redirects the client to the OpenID Identity Provider before authentication, 
		 and process the HTTP redirect from the OpenID Identity Provider after the client has successfully authenticated -->
	<bean id="myOpenIDAuthenticationFilter" class="org.springframework.security.openid.OpenIDAuthenticationFilter">
		<property name="consumer" ref="myOpenID4JavaConsumer"></property>
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="filterProcessesUrl" value="/j_spring_openid_security_check.htm"/>
		<property name="authenticationFailureHandler" ref="authenticationFailureHandler"/>
	</bean>
	
	<!-- Custom implementation of OpenID4JavaConsumer that allows specification of a white list of trusted Identity Providers. -->
	<bean id="myOpenID4JavaConsumer" class="esg.orp.orp.MyOpenID4JavaConsumer">
		<!-- list of user attributes to be retrieved as part of the OpenID exchange -->
	    <constructor-arg index="0">
	    	<list value-type="org.springframework.security.openid.OpenIDAttribute">
				<bean id="emailAttribute" class="org.springframework.security.openid.OpenIDAttribute">
					<constructor-arg index="0" value="email"/>
					<constructor-arg index="1" value="http://openid.net/schema/contact/internet/email"/>
					<property name="required" value="true" />
				</bean>
				<bean id="firstNameAttribute" class="org.springframework.security.openid.OpenIDAttribute">
					<constructor-arg index="0" value="firstname"/>
					<constructor-arg index="1" value="http://openid.net/schema/namePerson/first"/>
					<property name="required" value="true" />
				</bean>
				<bean id="lastNameAttribute" class="org.springframework.security.openid.OpenIDAttribute">
					<constructor-arg index="0" value="lastname"/>
					<constructor-arg index="1" value="http://openid.net/schema/namePerson/last"/>
					<property name="required" value="true" />
				</bean>
	    	</list>
	    </constructor-arg>
	    <!-- list of IdPs trusted by the ORP -->
		<property name="idpWhiteList">
			<list value-type="java.lang.String">
			
				<!-- PCMDI -->
				<value>https://pcmdi3.llnl.gov/esgcet/openid/provider.htm</value>
				<value>https://esgf-node1.llnl.gov/esgf-idp/idp/openidServer.htm</value>
				<value>https://esgf-node2.llnl.gov/esgf-idp/idp/openidServer.htm</value>
				<value>https://esgf-node3.llnl.gov/esgf-idp/idp/openidServer.htm</value>
				<value>https://esgf-node4.llnl.gov/esgf-idp/idp/openidServer.htm</value>
				<value>https://esgf-node5.llnl.gov/esgf-idp/idp/openidServer.htm</value>
				
				<!-- BADC -->
				<value>https://cmip-gw.badc.rl.ac.uk/openid/openidserver</value>
				<value>https://ndgbeta.badc.rl.ac.uk/openid/openidserver</value>
				<value>https://ndg3beta.badc.rl.ac.uk/OpenID/Provider/server</value>
				<value>https://ceda.ac.uk/OpenID/Provider/server</value>
				
				<!-- DKRZ -->
				<value>https://ipcc-ar5.dkrz.de/openid/provider.htm</value>
				<value>https://albedo2.dkrz.de/esgcet/openid/provider.htm</value>
				
				<!-- NASA/JPL -->
				<value>https://esg-gateway.jpl.nasa.gov/openid/provider.htm</value>
				<value>https://esg-datanode.jpl.nasa.gov/esgf-idp/idp/openidServer.htm</value>
				<value>https://test-datanode.jpl.nasa.gov/esgf-idp/idp/openidServer.htm</value>
				
				<!-- NCAR -->
				<value>https://www.earthsystemgrid.org/openid/provider.htm</value>
			    <value>https://esg.ucar.edu/openid/provider.htm</value>
			    <value>https://curator.ucar.edu/openid/provider.htm</value>
				
				<!-- NCI -->
				<value>https://esg.nci.org.au/esgcet/openid/provider.htm</value>
				
				<!-- NERSC -->
				<value>https://esg.nersc.gov/esgcet/openid/provider.htm</value>
				
				<!-- ORNL -->
				<value>https://esg2-gw.ccs.ornl.gov/esgcet/openid/provider.htm</value>
				<value>https://esg-gw.ornl.teragrid.org/openid/provider.htm</value>	
			    <value>https://esg-vm-demo01.ccs.ornl.gov/esgf-idp/idp/openidServer.htm</value>
			    <value>https://esg-vm-demo02.ccs.ornl.gov/esgf-idp/idp/openidServer.htm</value>
			    <value>https://esg-vm-demo03.ccs.ornl.gov/esgf-idp/idp/openidServer.htm</value>
			    <value>https://scotty.ccs.ornl.gov/esgf-idp/idp/openidServer.htm</value>
			    <value>https://bones.ccs.ornl.gov/esgf-idp/idp/openidServer.htm</value>
			    <value>https://sisko.ccs.ornl.gov/esgf-idp/idp/openidServer.htm</value>
					
			</list>
		</property>
	</bean>

	
	<bean id="openidConsumerManager" class="org.openid4java.consumer.ConsumerManager" />
	
 	<!-- Provider implementation of AuthenticationManager -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="myOpenIDAuthenticationProvider" />
    	<!--  <security:authentication-provider user-service-ref='myUserDetailsService'/> -->
  	</security:authentication-manager>
  	
  	<bean id="myOpenIDAuthenticationProvider" class="org.springframework.security.openid.OpenIDAuthenticationProvider">
		<property name="userDetailsService" ref="myUserDetailsService"></property>
	</bean>
  	
  	<!-- Sample user details service -->	
  	<bean id="myUserDetailsService" class="esg.orp.orp.MyUserDetailsService" />
  	
	<!-- Bean that is used to redirect the client to an error URL in case the authentication process did not succeed. -->
	<bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<property name="defaultFailureUrl" value="/home.htm?failed=true"/>
	</bean>
	
	<!-- Note: this bean is injected with system-specific property values configured in application.properties -->
	<bean id="postAuthenticationFilter" class="esg.orp.orp.PostAuthenticationFilter" init-method="init">
		<property name="keystoreFile" value="${keystoreFile}"/>
		<property name="keystorePassword" value="${keystorePassword}"/>
		<property name="keystoreAlias" value="${keystoreAlias}"/>
	</bean>
	
	

</beans>
