#!/bin/bash

#####
# ESG ORP
# This script is intended to be an adjunct to the esg-node script
#             (author: gavin@llnl.gov)
#****************************************************************************
#*                                                                          *
#*  Organization: Lawrence Livermore National Lab (LLNL)                    *
#*   Directorate: Computation                                               *
#*    Department: Computing Applications and Research                       *
#*      Division: S&T Global Security                                       *
#*        Matrix: Atmospheric, Earth and Energy Division                    *
#*       Program: PCMDI                                                     *
#*       Project: Earth Systems Grid (ESG) Data Node Software Stack         *
#*  First Author: Gavin M. Bell (gavin@llnl.gov)                            *
#*                                                                          *
#****************************************************************************
#*                                                                          *
#*   Copyright (c) 2009, Lawrence Livermore National Security, LLC.         *
#*   Produced at the Lawrence Livermore National Laboratory                 *
#*   Written by: Gavin M. Bell (gavin@llnl.gov)                             *
#*   LLNL-CODE-420962                                                       *
#*                                                                          *
#*   All rights reserved. This file is part of the:                         *
#*   Earth System Grid (ESG) Data Node Software Stack, Version 1.0          *
#*                                                                          *
#*   For details, see http://esg-repo.llnl.gov/esg-node/                    *
#*   Please also read this link                                             *
#*    http://esg-repo.llnl.gov/LICENSE                                      *
#*                                                                          *
#*   * Redistribution and use in source and binary forms, with or           *
#*   without modification, are permitted provided that the following        *
#*   conditions are met:                                                    *
#*                                                                          *
#*   * Redistributions of source code must retain the above copyright       *
#*   notice, this list of conditions and the disclaimer below.              *
#*                                                                          *
#*   * Redistributions in binary form must reproduce the above copyright    *
#*   notice, this list of conditions and the disclaimer (as noted below)    *
#*   in the documentation and/or other materials provided with the          *
#*   distribution.                                                          *
#*                                                                          *
#*   Neither the name of the LLNS/LLNL nor the names of its contributors    *
#*   may be used to endorse or promote products derived from this           *
#*   software without specific prior written permission.                    *
#*                                                                          *
#*   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    *
#*   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      *
#*   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS      *
#*   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE    *
#*   LIVERMORE NATIONAL SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR     *
#*   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,           *
#*   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       *
#*   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF       *
#*   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND    *
#*   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,     *
#*   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT     *
#*   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF     *
#*   SUCH DAMAGE.                                                           *
#*                                                                          *
#****************************************************************************
######


# Description: Installation of the esg ORP security infrastructure.  This
#              file is meant to be sourced by the esg-node
#              script that has the definition of checked_get(),
#              stop_tomcat(), start_tomcat(), $workdir,

esg_dist_url=${esg_dist_url:-"http://198.128.245.140/dist"}

#maybe I am paranoid but I want to make sure someone can't just set
#the environment to any place and have us just accept it and pull from
#it -gavin
if $(echo "${esg_dist_url}" | grep "http://198.128.245.140/dist" >& /dev/null); then echo "*"; else (echo "illegal distribution url: ${esg_dist_url}" && checked_done 1); fi

openid_relying_party_dist_url="${esg_dist_url}/esg-orp/esg-orp.war"
openid_relying_party_property_file_dist_url="${esg_dist_url}/esg-orp/esg-orp.properties"
openid_relying_party_app_home="${CATALINA_HOME}/webapps/OpenidRelyingParty"
install_manifest=${install_manifest:-"${esg_root_dir}/esgf-install-manifest"}

date_format=${date_format:-"+%Y_%m_%d_%H%M%S"}

esg_orp_version=${esg_orp_version:-"1.1.0"}

#arg (1) - install = 0 [default]
#          upgrade = 1 
setup_orp() {
    echo -n "Checking for Openid Relying Party ${esg_orp_version}"
    check_webapp_version "OpenidRelyingParty" ${esg_orp_version}
    local ret=$?
    ((ret == 0)) && (( ! force_install )) && echo " [OK]" && return 0

    echo
    echo "*******************************"
    echo "Setting up The OpenID Relying Party..."
    echo "*******************************"
    echo

    local upgrade=${1:-0}

    local default="Y"
    ((force_install)) && default="N"
    local dosetup
    if [ -d ${openid_relying_party_app_home} ]; then 
	echo "Detected an existing openid relying party installation..."
        read -p "Do you want to continue with openid relying party installation and setup? $([ "$default" = "N" ] && echo "[y/N]" || echo "[Y/n]") " dosetup
        [ -z "${dosetup}" ] && dosetup=${default}
	if [ "${dosetup}" != "Y" ] && [ "${dosetup}" != "y" ]; then
	    echo "Skipping node openid relying party installation and setup - will assume it's setup properly"
	    return 0
	fi
	
	local dobackup="N"
	read -p "Do you want to make a back up of the existing distribution?? [y/N] " dobackup
	if [ "${dobackup}" = "Y" ] || [ "${dobackup}" = "y" ]; then
	    echo "Creating a backup archive of this web application $openid_relying_party_app_home"
	    backup ${openid_relying_party_app_home}
	fi

	echo
    fi

    mkdir -p $workdir
    [ $? != 0 ] && return 1
    pushd $workdir >& /dev/null

    #collect the necessary resources...
    local openid_relying_party_dist_file=${openid_relying_party_dist_url##*/}
    checked_get ${openid_relying_party_dist_file} ${openid_relying_party_dist_url}
    local no_new_update=$?
    #set to the absolute file name...
    openid_relying_party_dist_file=$(readlink -f ${openid_relying_party_dist_file})

    if((upgrade)); then
	((no_new_update == 1)) && echo "nothing more to do, you are up2date" && return 1
	echo "Upgrading the OpenID Relying Party WebApp..."
    fi
    
    stop_tomcat

    #----------------------------
    local fetch_file=${openid_relying_party_property_file_dist_url##*/}
    checked_get ${fetch_file} ${openid_relying_party_property_file_dist_url}
    
    #NOTE: The saving of the last config file must be done *BEFORE* we untar the new distro!
    if ((upgrade)) && [ -e WEB-INF/classes/${fetch_file} ]; then
        cp WEB-INF/classes/${fetch_file} WEB-INF/classes/${fetch_file}.saved
        chmod 600 WEB-INF/classes/${fetch_file}*
    fi

    mkdir -p ${openid_relying_party_app_home}
    [ $? != 0 ] && return 1
    cd ${openid_relying_party_app_home}
    echo "Expanding war ${openid_relying_party_dist_file} in $(pwd)"
    $JAVA_HOME/bin/jar xf ${openid_relying_party_dist_file}
    [ $? != 0 ] && echo " ERROR: Could not extract the OpenID Relying Party: ${openid_relying_party_dist_file}" && popd && checked_done 1

    #----------------------------
    #Property file fetching and token replacement...
    #----------------------------
    pushd WEB-INF/classes >& /dev/null
    
    cp ${fetch_file} ${fetch_file}.tmpl
    if((upgrade)) && [ -e ${fetch_file}.saved ]; then
        #reuse the last properties file...
        #pull it out of the tar archive we made a few lines up
        cp ${fetch_file}.saved ${fetch_file}
    else
        orp_startup_hook $(readlink -f ${fetch_file})
    fi
    chown -R ${tomcat_user} ${openid_relying_party_app_home}
    chgrp -R ${tomcat_group} ${openid_relying_party_app_home}
    unset fetch_file
    popd >& /dev/null
    #----------------------------

    popd >& /dev/null
    echo

    write_orp_install_log

    start_tomcat
    return 0
}

write_orp_install_log() {
    local esg_orp_version=$(sed -n '/^Version:[ ]*\(.*\)/p' ${openid_relying_party_app_home}/META-INF/MANIFEST.MF | awk '{print $2}' | xargs)
    echo "$(date ${date_format}) webapp:OpenidRelyingParty=${esg_orp_version} ${openid_relying_party_app_home}" >> ${install_manifest}
    dedup ${install_manifest}
    get_property esgf_https_port
    [ -n "${esgf_https_port}" ] && local port=":${esgf_https_port}"
    write_as_property relyingparty_endpoint "https://${esgf_host}$( if ((esgf_https_port != 443)); then echo "${port}"; fi)/${openid_relying_party_app_home##*/}"
    write_as_property relyingparty_app_home ${openid_relying_party_app_home}
    return 0
}

#--------------------------------------
# Callout function from esg-node
#--------------------------------------
#This function is called by esg-node before starting tomcat!
#This is how we make sure we are always using the proper credentials.
orp_startup_hook() {
    #----------------------
    #edit the property file... #NOTE: I really don't like the global scoping of the admin password... but... hmm...
    echo -n "ORP Startup Hook: Syncing Credential Tokens... "

    local target_properties_file=${1:-"${openid_relying_party_app_home}/WEB-INF/classes/esg-orp.properties"}

    [ -e "${target_properties_file}" ] && cp ${target_properties_file} ${target_properties_file}.bak

    local keystore_file=$(sed -n 's#.*keystoreFile="\([^ "]*\)".*$#\1#p' ${tomcat_install_dir}/conf/server.xml) && echo -n "O" || echo -n "x"
    local keystore_pass=$(sed -n 's#.*keystorePass="\([^ "]*\)".*$#\1#p' ${tomcat_install_dir}/conf/server.xml) && echo -n "o" || echo -n "x"
    local keystore_alias=$(sed -n 's#.*keyAlias="\([^ "]*\)".*$#\1#p' ${tomcat_install_dir}/conf/server.xml) && echo -n "." || echo -n "x"

    sed -i 's#^[ ]*\(keystoreFile=\).*$#\1'${keystore_file}'#'   ${target_properties_file} && echo -n ":" || echo -n "8"
    sed -i 's#^[ ]*\(keystorePassword=\).*$#\1'${keystore_pass}'#'   ${target_properties_file} && echo -n "-" || echo -n "."
    sed -i 's#^[ ]*\(keystoreAlias=\).*$#\1'${keystore_alias}'#' ${target_properties_file} && echo -n ")" || echo -n "("
    echo
    #----------------------
}

#--------------------------------------
# Clean / Uninstall this module...
#--------------------------------------

clean_orp_webapp_subsystem() {
    init
    local doit="N"
    if [ -e ${openid_relying_party_app_home} ]; then
        read -p "remove ESGF ORP web service? (${openid_relying_party_app_home}) [y/N]: " doit
        if [ "doit" = "Y" ] || [ "$doit" = "y" ]; then
            echo "removing ${openid_relying_party_app_home}"
            if [ -n ${openid_relying_party_app_home} ]; then
                rm -rf ${openid_relying_party_app_home}
                [ $? != 0 ] && echo "ERROR: Unable to remove ${openid_relying_party_app_home}" && return 1
                perl -n -i -e'print unless m!webapp:OpenidRelyingParty!' ${install_manifest}
            fi
        fi
    fi 
    return 0
}
